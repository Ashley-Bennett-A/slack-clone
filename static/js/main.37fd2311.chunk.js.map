{"version":3,"sources":["Components/Room.js","Components/Message.js","Components/MessageContainer.js","Components/SendBox.js","Components/UserStatus.js","Components/login.js","App.js","serviceWorker.js","index.js"],"names":["creatingButtons","Message","state","origin","undefined","this","props","sender","user","setState","date","slice","avatar","className","align","react_default","a","createElement","key","mKey","src","avatarLoad","alt","body","timeFormatter","Component","MessageContainer","messages","autoScroll","_this","messagesEnd","scrollIntoView","behaviour","_this2","map","message","src_Components_Message","id","avatarUrl","senderId","parts","payload","content","createdAt","ref","el","SendBox","type","placeholder","onChange","changeHandler","onClick","submitter","UserStatus","status","split","nameSpliter","statusChecker","Room","value","messageToSend","usersInRoom","usersAreActive","currentRoom","peopleInRoom","messagesLoaded","test","peopleOffline","send","e","preventDefault","sendSimpleMessage","text","roomId","createRoom","name","concat","private","addUserIds","customData","foo","then","room","console","log","catch","err","handleChange","target","manager","connect","subscribeToRoomMultipart","hooks","onMessage","oldMessages","push","users","length","onPresenceChanged","badCode","array","arrayOff","Object","keys","presenceStore","forEach","userId","current","messageLimit","roomSubscriptions","src_Components_UserStatus","Components_MessageContainer","src_Components_SendBox","React","Login","loginFail","loggin","App","rooms","loggedIn","logInValue","logInFail","roomChange","setTimeout","src_Components_Room","handleLogInChange","tokenProvider","Chatkit","TokenProvider","url","chatManager","ChatManager","instanceLocator","currentUser","login","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.37fd2311.chunk.js","sourcesContent":["import React from \"react\";\nimport MessageContainer from \"./MessageContainer.js\";\nimport SendBox from \"./SendBox.js\";\nimport UserStatus from \"./UserStatus.js\";\nimport \"./Room.css\";\n\nlet creatingButtons;\n\nclass Room extends React.Component {\n  state = {\n    messages: [],\n    value: \"\",\n    messageToSend: \"\",\n    user: null,\n    usersInRoom: 0,\n    usersAreActive: \"offline\",\n    currentRoom: null,\n    peopleInRoom: {},\n    messagesLoaded: false,\n    test: [],\n    peopleOffline: []\n  };\n\n  componentDidMount() {\n    this.props.manager\n      .connect()\n      .then(user => {\n        this.setState({\n          currentRoom: this.props.room,\n          user: user,\n          messagesLoaded: true\n        });\n        // this.state.user\n        //   .fetchMultipartMessages({\n        //     roomId: this.props.room\n        //   })\n        //   .then(messages => {\n        //     console.log(messages);\n        //     this.setState({\n        //       messages: messages,\n        //       messagesLoaded: true\n        //     });\n        //   })\n        //   .catch(err => {\n        //     console.log(`Error fetching messages: ${err}`);\n        //     this.setState({\n        //       messagesLoaded: true\n        //     });\n        //   });\n        this.state.user.subscribeToRoomMultipart({\n          roomId: this.props.room,\n          hooks: {\n            onMessage: message => {\n              let oldMessages = this.state.messages;\n              oldMessages.push(message);\n              this.setState({\n                usersInRoom: user.users.length,\n                messages: oldMessages\n              });\n              //\n            },\n            onPresenceChanged: (state, user) => {\n              this.setState({\n                user: this.state.user\n              });\n              let array = [];\n              let arrayOff = [];\n              let badCode;\n              let people = Object.keys(this.state.user.presenceStore).length;\n              if (people === this.state.usersInRoom) {\n                Object.keys(this.state.user.presenceStore).forEach(status => {\n                  creatingButtons = this.state.user.presenceStore[status];\n                  badCode = status + \" \" + creatingButtons;\n                  if (badCode.split(\" \")[1] === \"online\") {\n                    array.push(badCode);\n                  } else {\n                    arrayOff.push(badCode);\n                  }\n\n                  //<WhosOnlineListItem key={index} presenceState=\"online\">\n                });\n              }\n              this.setState({\n                test: array,\n                peopleOffline: arrayOff\n              });\n              this.setState({\n                peopleInRoom: this.state.user.presenceStore\n              });\n\n              if (user.name === this.props.manager.userId) {\n                this.setState({\n                  usersAreActive: state.current\n                });\n              }\n            }\n          },\n          messageLimit: 100\n        });\n      })\n      .catch(err => console.log(err));\n  }\n\n  componentWillUnmount() {\n    console.log(\"unsubbed\");\n    console.log(this.props.user.roomSubscriptions);\n  }\n\n  send = e => {\n    e.preventDefault();\n    this.state.user.sendSimpleMessage({\n      text: this.state.value,\n      roomId: this.state.currentRoom\n    });\n    this.setState({\n      value: \"\"\n    });\n  };\n\n  //#region Create Room\n  createRoom = () => {\n    this.state.user\n      .createRoom({\n        name: `New ${this.state.user.id} Room`,\n        private: false,\n        addUserIds: [\"AB\", \"CR\"],\n        customData: {\n          foo: 42\n        }\n      })\n      .then(room => {\n        console.log(`Created room called ${room.name}`);\n      })\n      .catch(err => {\n        console.log(`Error creating room ${err}`);\n      });\n  };\n  //#endregion\n\n  handleChange = e => {\n    this.setState({\n      value: e.target.value\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"RoomContainer\">\n        <h1>\n          Room {this.state.currentRoom}({this.state.usersInRoom}\n          users){\" \"}\n        </h1>{\" \"}\n        <div className=\"UserContainer\">\n          {\" \"}\n          {this.state.test.map(status => {\n            return <UserStatus status={status} />;\n          })}{\" \"}\n          {this.state.peopleOffline.map(status => {\n            return <UserStatus status={status} />;\n          })}{\" \"}\n        </div>{\" \"}\n        {this.state.messagesLoaded ? (\n          <MessageContainer\n            messages={this.state.messages}\n            user={this.state.user}\n          />\n        ) : (\n          <h1> No messages </h1>\n        )}{\" \"}\n        <SendBox changeHandler={this.handleChange} submitter={this.send} />{\" \"}\n      </div>\n    );\n  }\n}\n\nexport default Room;\n","import React, { Component } from 'react'\nimport './Message.css'\n\nclass Message extends Component {\n\n    state = {\n        origin: undefined\n    }\n\n    componentDidMount() {\n        if (this.props.sender === this.props.user) {\n            this.setState({ origin: true })\n        } else {\n            this.setState({ origin: false })\n        }\n    }\n\n    timeFormatter() {\n        let long = this.props.date\n        let short = long.slice(11, 19)\n        return short\n    }\n\n    avatarLoad() {\n        if (!this.props.avatar) {\n            return \"https://i.ya-webdesign.com/images/default-avatar-png-6.png\"\n        }\n    }\n\n\n    render() {\n        let className, align;\n        if (this.state.origin) {\n            className = \"Sent\"\n            align = \"Right\"\n        } else {\n            className = \"Recieved\"\n            align = \"Left\"\n        }\n        return (\n            <li className={\"MessageCont \" + align} key={this.props.mKey}>\n                <div className=\"userInfo\">\n                    {/* <p className=\"MessageUser\">{this.props.sender}</p> */}\n                    <img className=\"MessageAvatar\" src={this.avatarLoad()} alt=\"avatar\" />\n                </div>\n                <div>\n                    <p className={\"MessageBody \" + className}>{this.props.body}</p>\n                    <p className={\"MessageDate \" + align}>{this.timeFormatter()} {this.props.sender}</p>\n                </div>\n            </li>\n        )\n    }\n}\n\nexport default Message","import React, { Component } from 'react'\nimport Message from './Message.js'\n\nclass MessageContainer extends Component {\n    state = {\n        messages: [],\n        user: null\n    }\n\n    autoScroll = () => {\n        this.messagesEnd.scrollIntoView({behaviour: 'smooth'})\n    }\n\n    componentDidMount() {\n        this.setState({ messages: this.props.messages, user: this.props.user })\n        this.autoScroll();\n    }\n\n    componentDidUpdate() {\n        this.autoScroll();\n    }\n\n    render(props) {\n        return (\n            <div className=\"MessagesContainer\">\n                {this.state.messages.map(message => {\n                    return (\n                        <Message\n                            user={this.state.user.id}\n                            avatar={this.state.user.avatarUrl}\n                            sender={message.senderId}\n                            body={message.parts[0].payload.content}\n                            date={message.createdAt}\n                        />\n                    );\n                })}\n                <div ref={(el) => {this.messagesEnd = el}}>\n                    \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MessageContainer","import React from 'react'\nimport './SendBox.css'\n\nconst SendBox = (props) => {\n    return (\n        <div className=\"SendContainer\">\n                <input className=\"sendBar\" type=\"text\" placeholder=\"Say something...\" onChange={props.changeHandler}/>\n                <i className=\"fas fa-paper-plane sendButton\" onClick={props.submitter}></i>\n        </div>\n    )\n}\n\nexport default SendBox","import React, { Component } from 'react'\nimport './UserStatus.css'\n\nclass UserStatus extends Component {\n\n    nameSpliter() {\n        let str = this.props.status;\n        let arr = str.split(\" \");\n        return arr\n    }\n\n    statusChecker() {\n        let className;\n        if(this.nameSpliter()[1] === \"online\") {\n            className = \"online\"\n        } else {\n            className = \"offline\"\n        }\n        return className;\n    }\n\n    render() {\n        return (\n            <div className={\"UserStatus \" + this.statusChecker()}>\n                <p>{this.nameSpliter()[0]}</p>\n            </div>\n        )\n    }\n}\n\nexport default UserStatus;","import React from \"react\";\nimport \"./Login.css\";\n\nconst Login = props => {\n  let className = props.loginFail;\n  if (className) {\n    return (\n      <div className=\"login\">\n        <input\n          type=\"text\"\n          placeholder=\"Case sensitive ID please...\"\n          onChange={props.changeHandler}\n        />\n        <i type=\"submit\" className=\"true\" onClick={props.loggin}>\n          Login\n        </i>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"login\">\n        <input\n          type=\"text\"\n          placeholder=\"Case sensitive ID please....\"\n          onChange={props.changeHandler}\n        />\n        <i type=\"submit\" className=\"false\" onClick={props.loggin}>\n          Login\n        </i>\n      </div>\n    );\n  }\n};\n\nexport default Login;\n","import React from \"react\";\nimport \"./App.css\";\nimport Room from \"./Components/Room\";\nimport Chatkit from \"@pusher/chatkit-client\";\nimport Login from \"./Components/login\";\n\nclass App extends React.Component {\n  state = {\n    rooms: [],\n    user: null,\n    currentRoom: null,\n    manager: null,\n    loggedIn: false,\n    logInValue: \"\",\n    logInFail: false\n  };\n\n  roomChange = e => {\n    this.setState({\n      room: null\n    });\n    let roomId = e.target.id;\n\n    const newRoom = () => {\n      return this.setState({\n        room: (\n          <Room\n            room={roomId}\n            manager={this.state.manager}\n            user={this.state.user}\n          />\n        )\n      });\n    };\n    setTimeout(newRoom, 100);\n  };\n\n  handleLogInChange = e => {\n    this.setState({\n      logInValue: e.target.value\n    });\n  };\n\n  loggin = e => {\n    // console.log(userID);\n    e.preventDefault();\n    this.setState({\n      logInFail: false\n    });\n    const tokenProvider = new Chatkit.TokenProvider({\n      url:\n        \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/e26280f8-acac-4da9-9e2a-80cd549547f8/token\"\n    });\n\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator: \"v1:us1:e26280f8-acac-4da9-9e2a-80cd549547f8\",\n\n      userId: this.state.logInValue,\n\n      tokenProvider: tokenProvider\n    });\n\n    chatManager\n      .connect()\n      .then(currentUser => {\n        this.setState({\n          user: currentUser,\n          rooms: currentUser.rooms,\n          currentRoom: currentUser.rooms[0].id,\n          manager: chatManager,\n          logInFail: false\n        });\n        const createRoom = room => {\n          return this.setState({\n            loggedIn: true,\n            room: (\n              <Room\n                room={room}\n                manager={this.state.manager}\n                user={this.state.user}\n              />\n            )\n          });\n        };\n        createRoom(this.state.currentRoom);\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          logInFail: true\n        });\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.loggedIn ? (\n          console.log(\"Logging in\")\n        ) : (\n          <Login\n            loggin={this.loggin}\n            loginFail={this.state.logInFail}\n            changeHandler={this.handleLogInChange}\n          />\n        )}\n        {this.state.logInFail ? (\n          <h1> No user by that ID.Try again. </h1>\n        ) : (\n          console.log(\"Successfully Logged in\")\n        )}\n        <div className=\"roomList\">\n          {this.state.rooms.map(room => {\n            return (\n              <i\n                className=\"roomNames\"\n                key={room.id}\n                id={room.id}\n                onClick={this.roomChange}\n              >\n                {room.name}\n              </i>\n            );\n          })}\n        </div>\n        {this.state.room}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}